{"/home/travis/build/npmtest/node-npmtest-youtube/test.js":"/* istanbul instrument in package npmtest_youtube */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-youtube/lib.npmtest_youtube.js":"/* istanbul instrument in package npmtest_youtube */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_youtube = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_youtube = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-youtube/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-youtube && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_youtube */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_youtube\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_youtube.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_youtube.rollup.js'] =\n            local.assetsDict['/assets.npmtest_youtube.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_youtube.__dirname + '/lib.npmtest_youtube.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-youtube/node_modules/youtube/index.js":"\nmodule.exports = require('./lib/youtube');","/home/travis/build/npmtest/node-npmtest-youtube/node_modules/youtube/lib/youtube.js":"\n/*!\n * youtube\n * Copyright(c) 2011 LearnBoost <tj@learnboost.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar mime = require('mime')\n  , EventEmitter = require('events').EventEmitter\n  , parseUrl = require('url').parse\n  , request = require('request')\n  , http = require('http')\n  , xml2js = require('xml2js')\n  , qs = require('qs')\n  , fs = require('fs');\n\n/**\n * Library version.\n */\n\nexports.version = '0.1.0';\n\n/**\n * Expose `Upload`.\n */\n\nexports.Upload = Upload;\n\n/**\n * Return embed HTML for the given youtube video `id`,\n * and `width` / `height` defaulting to 640x390.\n *\n * @param {String} id\n * @param {Number} width\n * @param {Number} height\n * @return {String}\n * @api public\n */\n\nexports.embed = function(id, width, height){\n  width = width || 640;\n  height = height || 390;\n  return '<object width=\"' + width + '\" height=\"' + height\n    + '\"><param name=\"movie\" value=\"http://www.youtube.com/v/' + id\n    + '&hl=en_US&feature=player_embedded&version=3\">'\n    + '</param><param name=\"allowFullScreen\" value=\"true\">'\n    + '</param><param name=\"allowScriptAccess\" value=\"always\">'\n    + '</param><embed src=\"http://www.youtube.com/v/' + id\n    + '&hl=en_US&feature=player_embedded&version=3\" type=\"application/x-shockwave-flash\"'\n    + 'allowfullscreen=\"true\" allowScriptAccess=\"always\" width=\"' + width\n    + '\" height=\"' + height + '\"></embed></object>';\n};\n\n/**\n * Shortcut for `new Upload(path)`.\n *\n * @param {String} path\n * @return {Upload}\n * @api public\n */\n\nexports.createUpload = function(path){\n  return new Upload(path);\n};\n\n/**\n * Initialize a new `Upload` with the given video `path` or id.\n *\n * @param {String} path or id\n * @api public\n */\n\nfunction Upload(path) {\n  this.meta = {};\n  this.id = path;\n  this.path = path;\n  this.keywords([]);\n  this.rate(true);\n  this.comments(true);\n  this.commentVoting(true);\n  this.list(true);\n  this.embed(true);\n  this.syndicate(true);\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nUpload.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Set the `user`.\n *\n * @param {String} user\n * @return {Upload}\n * @api public\n */\n\nUpload.prototype.user = function(user){\n  this._user = user;\n  return this;\n};\n\n/**\n * Set the `password`.\n *\n * @param {String} password\n * @return {Upload}\n * @api public\n */\n\nUpload.prototype.password = function(password){\n  this._password = password;\n  return this;\n};\n\n/**\n * Set the `source`.\n *\n * @param {String} source\n * @return {Upload}\n * @api public\n */\n\nUpload.prototype.source = function(source){\n  this._source = source;\n  return this;\n};\n\n/**\n * Set the video `title`.\n *\n * @param {String} title\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.title = function(title){\n  this.meta.title = title;\n  return this;\n};\n\n/**\n * Set developer `key`.\n *\n * @param {String} key\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.key = function(key){\n  this._key = key;\n  return this;\n};\n\n/**\n * Set the video `description`.\n *\n * @param {String} description\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.description = function(description){\n  this.meta.description = description;\n  return this;\n};\n\n/**\n * Set `category`.\n *\n * @param {String} category\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.category = function(category){\n  this.meta.category = category;\n  return this;\n};\n\n/**\n * Set keywords to `arr`.\n *\n * @param {Array} arr\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.keywords = function(arr){\n  this.meta.keywords = arr;\n  return this;\n};\n\n/**\n * Allow or deny video rating.\n *\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.rate = function(allow){\n  this.meta.rate = allow;\n  return this;\n};\n\n/**\n * Allow or disallow comments.\n *\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.comments = function(allow){\n  this.meta.comment = allow;\n  return this;\n};\n\n/**\n * Allow or disallow comment voting.\n *\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.commentVoting = function(allow){\n  this.meta.commentVote = allow;\n  return this;\n};\n\n/**\n * Allow or disallow embedding.\n *\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.embed = function(allow){\n  this.meta.embed = allow;\n  return this;\n};\n\n/**\n * Allow or disallow syndication.\n *\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.syndicate = function(allow){\n  this.meta.syndicate = allow;\n  return this;\n};\n\n/**\n * List or unlist the video.\n *\n * @return {Upload} for chaining\n * @api public\n */\n\nUpload.prototype.list = function(allow){\n  this.meta.list = allow;\n  return this;\n};\n\n/**\n * Get auth token, and invoke `fn(err, res)`.\n *\n * @param {Function} fn\n * @return {Upload} for chaining\n * @api private\n */\n\nUpload.prototype.getAuth = function(fn){\n  var options = {};\n\n  options.url = 'https://www.google.com/accounts/ClientLogin';\n  options.headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n\n  options.body = qs.stringify({\n      Email: this._user\n    , Passwd: this._password\n    , source: this._source\n    , service: 'youtube'\n  });\n\n  request.post(options, function(err, res, body){\n    if (err) return fn(err);\n    fn(null, parse(body));\n  });\n\n  return this;\n};\n\n/**\n * Upload the video and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @return {Upload} for chaining\n * @api private\n */\n\nUpload.prototype.uploadData = function(fn){\n  var self = this\n    , options = {}\n    , auth = this.auth\n    , path = this.path\n    , boundary = 'keyboardcat'\n    , tail = '\\r\\n--' + boundary + '--\\r\\n'\n    , len = tail.length\n    , key = this._key\n    , user = this._user\n    , body = '';\n\n  function buf(str) {\n    body += str;\n    len += Buffer.byteLength(str);\n  }\n\n  var url = 'http://uploads.gdata.youtube.com/feeds/api/users/' + user + '/uploads';\n\n  url = parseUrl(url);\n  options.method = 'POST';\n  options.path = url.pathname;\n  options.host = url.hostname;\n\n  fs.stat(path, function(err, stat){\n    if (err) return fn(err);\n    // xml\n    buf('\\r\\n--' + boundary + '\\r\\n');\n    buf('Content-Type: application/atom+xml; charset=UTF-8\\r\\n');\n    buf('\\r\\n');\n    buf(self.metadata());\n\n    // video\n    len += stat.size;\n    buf('\\r\\n--' + boundary + '\\r\\n');\n    buf('Content-Type: video/webm\\r\\n');\n    buf('Content-Transfer-Encoding: binary\\r\\n');\n    buf('\\r\\n');\n\n    // header\n    options.headers = {\n        'Authorization': 'GoogleLogin auth=' + auth\n      , 'GData-Version': '2'\n      , 'X-GData-Key': 'key=' + key\n      , 'Accept': 'text/plain'\n      , 'Content-Type': 'multipart/related; boundary=' + boundary\n      , 'Content-Length': len\n      , 'Slug': path\n    };\n\n    // make the request\n    var req = http.request(options, function(res){\n      // failed\n      if (res.statusCode >= 400) {\n        var buf = '';\n        res.on('data', function(chunk){ buf += chunk; });\n        res.on('end', function(){\n          fn(new Error(buf || 'Status ' + res.statusCode + ' without body'));\n        });\n      // ok\n      } else {\n        self.parseXML(res, fn);\n      }\n    });\n\n    // stream the file part\n    var stream = fs.createReadStream(path, { end: false });\n    self.emit('stream', stream, stat.size);\n    req.write(body);\n    stream.on('end', function(){\n      req.write(tail);\n    }).pipe(req);\n  });\n\n  return this;\n};\n\n/**\n * Parse the XML `res`.\n *\n * @param {IncomingMessage} res\n * @param {Function} fn\n * @api private\n */\n\nUpload.prototype.parseXML = function(res, fn){\n  var parser = new xml2js.Parser;\n  res.setEncoding('utf8');\n  res.on('data', function(chunk){ parser.parseString(chunk); });\n  parser.on('end', function(obj){\n    obj.url = obj['media:group']['media:content']['@'].url;\n    obj.id = obj['media:group']['yt:videoid'];\n    obj.embed = function(width, height){\n      return exports.embed(obj.id, width, height);\n    };\n    fn(null, obj);\n  });\n};\n\n/**\n * Upload and invoke `fn(err, info)`.\n *\n * @param {Function}\n * @api public\n */\n\nUpload.prototype.upload = function(fn){\n  var self = this;\n  this.getAuth(function(err, res){\n    if (err) return fn(err);\n    self.auth = res.auth;\n    self.uploadData(fn);\n  });\n  return this;\n};\n\n/**\n * Delete the video and invoke `fn(err)`.\n *\n * @param {Type} name\n * @return {Type}\n * @api public\n */\n\nUpload.prototype.destroy = function(fn){\n  var self = this;\n  this.getAuth(function(err, res){\n    if (err) return fn(err);\n    var options = {}\n      , auth = res.auth\n      , id = self.path\n      , key = self._key\n      , user = self._user\n      , body = '';\n\n    var url = 'http://gdata.youtube.com/feeds/api/users/default/uploads/' + id;\n\n    url = parseUrl(url);\n    options.method = 'DELETE';\n    options.path = url.pathname;\n    options.host = url.hostname;\n\n    options.headers = {\n        'Authorization': 'GoogleLogin auth=' + auth\n      , 'GData-Version': '2'\n      , 'X-GData-Key': 'key=' + key\n      , 'Accept': 'text/plain'\n    };\n\n    // make the request\n    var req = http.request(options, function(res){\n      // failed\n      if (res.statusCode >= 400) {\n        var buf = '';\n        res.on('data', function(chunk){ buf += chunk; });\n        res.on('end', function(){\n          fn(new Error(buf || 'Status ' + res.statusCode + ' without body'));\n        });\n      // ok\n      } else {\n        fn();\n      }\n    });\n\n    req.end();\n  });\n};\n\n/**\n * Generate XML meta-data.\n *\n * @return {String}\n * @api public\n */\n\nUpload.prototype.metadata = function(){\n  var meta = this.meta;\n  return '<?xml version=\"1.0\"?>\\\n  <entry xmlns=\"http://www.w3.org/2005/Atom\"\\\n    xmlns:media=\"http://search.yahoo.com/mrss/\"\\\n    xmlns:yt=\"http://gdata.youtube.com/schemas/2007\">\\\n    <media:group>\\\n      <media:title type=\"plain\">' + escape(meta.title) + '</media:title>\\\n      <media:description type=\"plain\">' + escape(meta.description) + '</media:description>\\\n      <media:category\\\n        scheme=\"http://gdata.youtube.com/schemas/2007/categories.cat\">' + meta.category + '\\\n      </media:category>\\\n      <media:category\\\n        scheme=\"http://gdata.youtube.com/schemas/2007/developertags.cat\">LearnBoost\\\n      </media:category>\\\n      <media:keywords>' + meta.keywords.join(', ') + '</media:keywords>\\\n    </media:group>\\\n    <yt:accessControl action=\"list\" permission=\"' + (meta.list ? 'allowed' : 'denied') + '\"/>\\\n    <yt:accessControl action=\"rate\" permission=\"' + (meta.rate ? 'allowed' : 'denied') + '\"/>\\\n    <yt:accessControl action=\"comment\" permission=\"' + (meta.comment ? 'allowed' : 'denied') + '\"/>\\\n    <yt:accessControl action=\"commentVote\" permission=\"' + (meta.commentVote ? 'allowed' : 'denied') + '\"/>\\\n    <yt:accessControl action=\"embed\" permission=\"' + (meta.embed ? 'allowed' : 'denied') + '\"/>\\\n    <yt:accessControl action=\"syndicate\" permission=\"' + (meta.syndicate ? 'allowed' : 'denied') + '\"/>\\\n  </entry>';\n};\n\n/**\n * Parse googles weird x-www-form-urlencoded-ish response.\n *\n * @param {String} body\n * @return {Object}\n * @api private\n */\n\nfunction parse(body) {\n  return body.split('\\n').reduce(function(obj, str){\n    var parts = str.split('=')\n      , key = parts.shift()\n      , val = parts.shift();\n    obj[key.toLowerCase()] = val;\n    return obj;\n  }, {});\n}\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {String} html\n * @return {String}\n * @api private\n */\n\nfunction escape(html) {\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n"}